//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.hpp"

// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

namespace
{
// return the wxBORDER_SIMPLE that matches the current application theme
wxBorder get_border_simple_theme_aware_bit()
{
#if wxVERSION_NUMBER >= 3300 && defined(__WXMSW__)
    return wxSystemSettings::GetAppearance().IsDark() ? wxBORDER_SIMPLE : wxBORDER_STATIC;
#else
    return wxBORDER_DEFAULT;
#endif
} // DoGetBorderSimpleBit
bool bBitmapLoaded = false;
} // namespace

MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos,
                                       const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxHORIZONTAL);
    this->SetSizer(boxSizer1);

    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer1->Add(m_mainPanel, 1, wxALL | wxEXPAND, WXC_FROM_DIP(0));

    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxHORIZONTAL);
    m_mainPanel->SetSizer(boxSizer2);

    wxBoxSizer* boxSizer3 = new wxBoxSizer(wxVERTICAL);

    boxSizer2->Add(boxSizer3, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_staticText1 = new wxStaticText(m_mainPanel, wxID_ANY, _("Value"), wxDefaultPosition,
                                     wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizer3->Add(m_staticText1, 0, wxALL, WXC_FROM_DIP(5));

    m_numberSpinCtrl = new wxSpinCtrl(m_mainPanel, wxID_ANY, wxT("0"), wxDefaultPosition,
                                      wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), wxSP_ARROW_KEYS);
    m_numberSpinCtrl->SetRange(0, 100000);
    m_numberSpinCtrl->SetValue(0);

    boxSizer3->Add(m_numberSpinCtrl, 0, wxALL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer4 = new wxBoxSizer(wxVERTICAL);

    boxSizer2->Add(boxSizer4, 4, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_binaryStaticText = new wxStaticText(m_mainPanel, wxID_ANY, _("Binary"), wxDefaultPosition,
                                          wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizer4->Add(m_binaryStaticText, 0, wxALL, WXC_FROM_DIP(5));

    m_bitPanel =
        new wxPanel(m_mainPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer4->Add(m_bitPanel, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    boxSizerBitPanel = new wxBoxSizer(wxHORIZONTAL);
    m_bitPanel->SetSizer(boxSizerBitPanel);

    m_mainMenuBar = new wxMenuBar(0);
    this->SetMenuBar(m_mainMenuBar);

    m_name1 = new wxMenu();
    m_mainMenuBar->Append(m_name1, _("File"));

    m_menuItem1 = new wxMenuItem(m_name1, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name1->Append(m_menuItem1);

    m_name2 = new wxMenu();
    m_mainMenuBar->Append(m_name2, _("Help"));

    m_menuItem2 = new wxMenuItem(m_name2, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_name2->Append(m_menuItem2);

    SetName(wxT("MainFrameBaseClass"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) {
        GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
    // Connect events
    m_numberSpinCtrl->Bind(wxEVT_COMMAND_TEXT_UPDATED, &MainFrameBaseClass::OnSpinCtrl, this);
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &MainFrameBaseClass::OnExit, this, m_menuItem1->GetId());
    this->Bind(wxEVT_COMMAND_MENU_SELECTED, &MainFrameBaseClass::OnAbout, this, m_menuItem2->GetId());
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    m_numberSpinCtrl->Unbind(wxEVT_COMMAND_TEXT_UPDATED, &MainFrameBaseClass::OnSpinCtrl, this);
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &MainFrameBaseClass::OnExit, this, m_menuItem1->GetId());
    this->Unbind(wxEVT_COMMAND_MENU_SELECTED, &MainFrameBaseClass::OnAbout, this, m_menuItem2->GetId());
}
